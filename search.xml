<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[注释模板（仅供娱乐）]]></title>
    <url>%2F2017%2F09%2F02%2F%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF%EF%BC%88%E4%BB%85%E4%BE%9B%E5%A8%B1%E4%B9%90%EF%BC%89%2F</url>
    <content type="text"><![CDATA[注释模板（仅供娱乐）今天无意间在网上看到了一些好玩的注释，让我想起之前开始写代码的时候就已经有人开始在代码中添加这些东西，感觉挺好玩的，随手摘抄，仅供娱乐。 参考网址http://blog.csdn.net/ouyang_peng/article/details/51803181http://www.oschina.net/code/snippet_1046345_43901 在VS中直接设置注释模板因为我只是觉得好玩，所以摘抄一下，具体设置可以参照上面第一个参考网址进行设置。 佛祖保佑 永无bug12345678910111213141516171819202122232425262728293031/** * _ooOoo_ * o8888888o * 88" . "88 * (| -_- |) * O\ = /O * ____/`---'\____ * .' \\| |// `. * / \\||| : |||// \ * / _||||| -:- |||||- \ * | | \\\ - /// | | * | \_| ''\---/'' | | * \ .-\__ `-` ___/-. / * ___`. .' /--.--\ `. . __ * ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"". * | | : `- \`.;`\ _ /`;.`/ - ` : | | * \ \ `-. \_ __\ /__ _/ .-` / / * ======`-.____`-.___\_____/___.-`____.-'====== * `=---=' * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ * 佛祖保佑 永无BUG * 佛曰: * 写字楼里写字间，写字间里程序员； * 程序人员写程序，又拿程序换酒钱。 * 酒醒只在网上坐，酒醉还来网下眠； * 酒醉酒醒日复日，网上网下年复年。 * 但愿老死电脑间，不愿鞠躬老板前； * 奔驰宝马贵者趣，公交自行程序员。 * 别人笑我忒疯癫，我笑自己命太贱； * 不见满街漂亮妹，哪个归得程序员？*/ 12345678910111213141516171819202122////////////////////////////////////////////////////////////////////// _ooOoo_ //// o8888888o //// 88" . "88 //// (| ^_^ |) //// O\ = /O //// ____/`---'\____ //// .' \\| |// `. //// / \\||| : |||// \ //// / _||||| -:- |||||- \ //// | | \\\ - /// | | //// | \_| ''\---/'' | | //// \ .-\__ `-` ___/-. / //// ___`. .' /--.--\ `. . ___ //// ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"". //// | | : `- \`.;`\ _ /`;.`/ - ` : | | //// \ \ `-. \_ __\ /__ _/ .-` / / //// ========`-.____`-.___\_____/___.-`____.-'======== //// `=---=' //// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ //// 佛祖保佑 永无BUG 永不修改 ////////////////////////////////////////////////////////////////////// 神兽保佑 代码无BUG！1234567891011121314151617// ┏┓ ┏┓// ┏┛┻━━━┛┻┓// ┃ ┃ // ┃ ━ ┃// ┃ ┳┛ ┗┳ ┃// ┃ ┃// ┃ ┻ ┃// ┃ ┃// ┗━┓ ┏━┛// ┃ ┃ 神兽保佑 // ┃ ┃ 代码无BUG！// ┃ ┗━━━┓// ┃ ┣┓// ┃ ┏┛// ┗┓┓┏━┳┓┏┛// ┃┫┫ ┃┫┫// ┗┻┛ ┗┻┛ 1234567891011121314151617181920212223/** * * ━━━━━━神兽出没━━━━━━ * ┏┓ ┏┓ * ┏┛┻━━━┛┻┓ * ┃ ┃ * ┃ ━ ┃ * ┃ ┳┛ ┗┳ ┃ * ┃ ┃ * ┃ ┻ ┃ * ┃ ┃ * ┗━┓ ┏━┛Code is far away from bug with the animal protecting * ┃ ┃ 神兽保佑,代码无bug * ┃ ┃ * ┃ ┗━━━┓ * ┃ ┣┓ * ┃ ┏┛ * ┗┓┓┏━┳┓┏┛ * ┃┫┫ ┃┫┫ * ┗┻┛ ┗┻┛ * * ━━━━━━感觉萌萌哒━━━━━━ */ 1234567891011121314151617181920212223/** * ┏┓ ┏┓ * ┏┛┻━━━┛┻┓ * ┃ ┃ * ┃ ━ ┃ * ┃ ＞ ＜ ┃ * ┃ ┃ * ┃... ⌒ ... ┃ * ┃ ┃ * ┗━┓ ┏━┛ * ┃ ┃ Code is far away from bug with the animal protecting * ┃ ┃ 神兽保佑,代码无bug * ┃ ┃ * ┃ ┃ * ┃ ┃ * ┃ ┃ * ┃ ┗━━━┓ * ┃ ┣┓ * ┃ ┏┛ * ┗┓┓┏━┳┓┏┛ * ┃┫┫ ┃┫┫ * ┗┻┛ ┗┻┛ */ 1234567891011121314151617181920212223/** * ┏┓ ┏┓+ + * ┏┛┻━━━┛┻┓ + + * ┃ ┃ * ┃ ━ ┃ ++ + + + * ████━████ ┃+ * ┃ ┃ + * ┃ ┻ ┃ * ┃ ┃ + + * ┗━┓ ┏━┛ * ┃ ┃ * ┃ ┃ + + + + * ┃ ┃ Code is far away from bug with the animal protecting * ┃ ┃ + 神兽保佑,代码无bug * ┃ ┃ * ┃ ┃ + * ┃ ┗━━━┓ + + * ┃ ┣┓ * ┃ ┏┛ * ┗┓┓┏━┳┓┏┛ + + + + * ┃┫┫ ┃┫┫ * ┗┻┛ ┗┻┛+ + + + */ 程序员之歌1234567891011/** * 江城子 . 程序员之歌 * * 十年生死两茫茫，写程序，到天亮。 * 千行代码，Bug何处藏。 * 纵使上线又怎样，朝令改，夕断肠。 * * 领导每天新想法，天天改，日日忙。 * 相顾无言，惟有泪千行。 * 每晚灯火阑珊处，夜难寐，加班狂。*/ 其他好玩的图片1234567891011121314151617/********************************************************************** .--, .--, ( ( \.---./ ) ) '.__/o o\__.' &#123;= ^ =&#125; &gt; - &lt; / \ // \\ //| . |\\ "'\ /'"_.-~^`'-. \ _ /--' ` ___)( )(___ (((__) (__))) 高山仰止,景行行止.虽不能至,心向往之。**********************************************************************/ 1234567891011121314151617181920212223242526272829303132333435/********************************************************************** :: :;J7, :, ::;7: ,ivYi, , ;LLLFS: :iv7Yi :7ri;j5PL ,:ivYLvr ,ivrrirrY2X, :;r@Wwz.7r: :ivu@kexianli. :iL7::,:::iiirii:ii;::::,,irvF7rvvLujL7ur ri::,:,::i:iiiiiii:i:irrv177JX7rYXqZEkvv17 ;i:, , ::::iirrririi:i:::iiir2XXvii;L8OGJr71i :,, ,,: ,::ir@mingyi.irii:i:::j1jri7ZBOS7ivv, ,::, ::rv77iiiriii:iii:i::,rvLq@huhao.Li ,, ,, ,:ir7ir::,:::i;ir:::i:i::rSGGYri712: ::: ,v7r:: ::rrv77:, ,, ,:i7rrii:::::, ir7ri7Lri , 2OBBOi,iiir;r:: ,irriiii::,, ,iv7Luur: ,, i78MBBi,:,:::,:, :7FSL: ,iriii:::i::,,:rLqXv:: : iuMMP: :,:::,:ii;2GY7OBB0viiii:i:iii:i:::iJqL;:: , ::::i ,,,,, ::LuBBu BBBBBErii:i:i:i:i:i:i:r77ii , : , ,,:::rruBZ1MBBqi, :,,,:::,::::::iiriri: , ,,,,::::i: @arqiao. ,:,, ,:::ii;i7: :, rjujLYLi ,,:::::,:::::::::,, ,:i,:,,,,,::i:iii :: BBBBBBBBB0, ,,::: , ,:::::: , ,,,, ,,::::::: i, , ,8BMMBBBBBBi ,,:,, ,,, , , , , , :,::ii::i:: : iZMOMOMBBM2::::::::::,,,, ,,,,,,:,,,::::i:irr:i:::, i ,,:;u0MBMOG1L:::i:::::: ,,,::, ,,, ::::::i:i:iirii:i:i: : ,iuUuuXUkFu7i:iii:i:::, :,:,: ::::::::i:i:::::iirr7iiri:: : :rk@Yizero.i:::::, ,:ii:::::::i:::::i::,::::iirrriiiri::, : 5BMBBBBBBSr:,::rv2kuii:::iii::,:i:,, , ,,:,:i@petermu., , :r50EZ8MBBBBGOBBBZP7::::i::,:::::,: :,:,::i;rrririiii:: :jujYY7LS0ujJL7r::,::i::,::::::::::::::iirirrrrrrr:ii: ,: :@kevensun.:,:,,,::::i:i:::::,,::::::iir;ii;7v77;ii;i, ,,, ,,:,::::::i:iiiii:i::::,, ::::iiiir@xingjief.r;7:i, , , ,,,:,,::::::::iiiiiiiiii:,:,:::::::::iiir;ri7vL77rrirri:: :,, , ::::::::i:::i:::i:i::,,,,,:,::i:i:::iir;@Secbone.ii:::**********************************************************************/ 12345678910111213141516/** * ┌───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐ * │Esc│ │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│ ┌┐ ┌┐ ┌┐ * └───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘ └┘ └┘ └┘ * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐ * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │ * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤ * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │ │ * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │ * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│" '│ Enter │ │ 4 │ 5 │ 6 │ │ * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤ ┌───┐ ├───┼───┼───┼───┤ * │ Shift │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│ Shift │ │ ↑ │ │ 1 │ 2 │ 3 │ │ * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││ * │ Ctrl│ │Alt │ Space │ Alt│ │ │Ctrl│ │ ← │ ↓ │ → │ │ 0 │ . │←─┘│ * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘ */ 123456789101112131415161718192021222324/* ************************************************************** * * * .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-. * * | ______ | * * | .-" "-. | * * | / \ | * * | _ | | _ | * * | ( \ |, .-. .-. ,| / ) | * * | &gt; "=._ | )(__/ \__)( | _.=" &lt; | * * | (_/"=._"=._ |/ /\ \| _.="_.="\_) | * * | "=._"(_ ^^ _)"_.=" | * * | "=\__|IIIIII|__/=" | * * | _.="| \IIIIII/ |"=._ | * * | _ _.="_.="\ /"=._"=._ _ | * * | ( \_.="_.=" `--------` "=._"=._/ ) | * * | &gt; _.=" "=._ &lt; | * * | (_/ \_) | * * | | * * '-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=' * * * * LASCIATE OGNI SPERANZA, VOI CH'ENTRATE * ************************************************************** */]]></content>
      <tags>
        <tag>注释模板（仅供娱乐）</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim操作]]></title>
    <url>%2F2017%2F08%2F25%2Fvim%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[vim的基本操作本人在实验楼学习的时候摘抄下来的，留作自己的笔记。 游标移动按Esc进入普通模式，在该模式下使用方向键或者h,j,k,l键可以移动游标。 按键 说明 h 左 l 右（小写L） j 下 k 上 w 移动到下一个单词 b 移动到上一个单词 进入插入模式在普通模式下使用下面的键将进入插入模式，并可以从相应的位置开始输入 命令 说明 i 在当前光标处进行编辑 I 在行首插入 A 在行末插入 a 在光标后插入编辑 o 在当前行后插入一个新行 O 在当前行前插入一个新行 cw 替换从光标所在位置后到一个单词结尾的字符 命令行模式下保存文档从普通模式输入:进入命令行模式，输入w回车，保存文档。输入:w 文件名可以将文档另存为其他文件名或存到其它路径下 命令行模式下退出vim从普通模式输入:进入命令行模式，输入wq回车，保存并退出编辑 以下为其它几种退出方式： 命令 说明 :q! 强制退出，不保存 :q 退出 :wq! 强制保存并退出 :w &lt;文件路径&gt; 另存为 :saveas 文件路径 另存为 :x 保存并退出 :wq 保存并退出 普通模式下退出vim普通模式下输入Shift+zz即可保存退出vim 普通模式下删除vim文本信息进入普通模式，使用下列命令可以进行文本快速删除： 命令 说明 x 删除游标所在的字符 X 删除游标所在前一个字符 Delete 同x dd 删除整行 dw 删除一个单词（不适用中文） d$或D 删除至行尾 d^ 删除至行首 dG 删除到文档结尾处 d1G 删至文档首部 除此之外，你还可以在命令之前加上数字，表示一次删除多行，如：2dd表示一次删除2行i 重复执行上次命令在普通模式下.(小数点)表示重复上一次的命令操作 执行指定次数相同的命令进入普通模式输入N，N表示重复后面的次数 例如：输入10x，删除10个连续字符 输入3dd，将会删除3行文本 在普通模式下，你还可以使用dw或者daw(delete a word)删除一个单词，所以你可以很容易的联想到dnw(n替换为相应数字)表示删除n个单词 游标的快速跳转普通模式下，下列命令可以让光标快速调转到指定位置，我们分别讨论快速实现行间跳转和行内跳转 行间跳转 命令 说明 nG(n Shift+g) 游标移动到第 n 行(如果默认没有显示行号，请先进入命令模式，输入:set nu以显示行号) gg 游标移动到到第一行 G(Shift+g) 到最后一行 小技巧：你在完成依次跳转后，可以使用Ctrl+o快速回到上一次(跳转前)光标所在位置,这个技巧很实用，比如当你在写代码时，忽然想起有个bug，需要修改，这时候你跳过去改好了，只需要按下Ctrl+o就可以回到你之前的位置。vim中会用很多类似的小技巧就等着你去发掘。 行内跳转普通模式下使用下列命令在行内按照单词为单位进行跳转 命令 说明 w 到下一个单词的开头 e 到下一个单词的结尾 b 到前一个单词的开头 ge 到前一个单词的结尾 0或^ 到行头 $ 到行尾 f&lt;字母&gt; 向后搜索&lt;字母&gt;并跳转到第一个匹配的位置(非常实用) F&lt;字母&gt; 向前搜索&lt;字母&gt;并跳转到第一个匹配的位置 t&lt;字母&gt; 向后搜索&lt;字母&gt;并跳转到第一个匹配位置之前的一个字母(不常用) T&lt;字母&gt; 向前搜索&lt;字母&gt;并跳转到第一个匹配位置之后的一个字母(不常用) 复制粘贴和剪切复制及粘贴文本 ● 普通模式中使用y复制 ○ 普通模式中，yy复制游标所在的整行（3yy表示复制3行） ○ 普通模式中，y^ 复制至行首，或y0。不含光标所在处字符。 ○ 普通模式中，y$ 复制至行尾。含光标所在处字符。 ○ 普通模式中，yw 复制一个单词。 ○ 普通模式中，y2w 复制两个单词。 ○ 普通模式中，yG 复制至文本末。 ○ 普通模式中，y1G 复制至文本开头。 ● 普通模式中使用p粘贴 ○ 普通模式中，p(小写)代表粘贴至光标后（下） ○ 普通模式中，P(大写)代表粘贴至光标前（上） 剪切及粘贴其实前面讲得dd删除命令就是剪切，你每次dd删除文档内容后，便可以使用p来粘贴，也这一点可以让我们实现一个很爽快的功能——交换上下行 字符的替换及撤销(Undo操作)替换和撤销(Undo)命令替换和Undo命令都是针对普通模式下的操作 命令 说明 r+&lt;待替换字母&gt; 将游标所在字母替换为指定字母 R 连续替换，直到按下Esc cc 替换整行，即删除游标所在行，并进入插入模式 cw 替换一个单词，即删除一个单词，并进入插入模式 C(大写) 替换游标以后至行末~反转游标所在字母大小写 u{n} 撤销一次或n次操作 U(大写) 撤销当前行的所有修改 Ctrl+r redo，即撤销undo的操作 快速缩进使用命令进行快速调整缩进操作 ● 普通模式下输入15G，跳转到15行 ● 普通模式下输入&gt;&gt; 整行将向右缩进（使用，用于格式化代码超爽） ● 普通模式下输入&lt;&lt; 整行向左回退 ● 普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数 shiftwidth命令shiftwidth命令是指上一节&gt;&gt;命令产生的缩进（可以简写成sw） 普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数 获取目前的设定值 :set shiftwidth? 设置缩进为10个字符 :set shiftwidth=10 输入ESC回到普通模式，再次尝试&gt;&gt;看缩进量是否变化 调整文本位置命令行模式下输入:ce(center)命令使本行内容居中 :ce 命令行模式下输入:ri(right)命令使本行文本靠右 :ri 命令行模式下输入:le(left)命令使本行内容靠左 :le 查找快速查找普通模式下输入/然后键入需要查找的字符串 按回车后就会进行查找。 ？与/功能相同，只不过？是向上而/是向下查找。 进入查找之后，输入n和N可以继续查找 n表示继续查找，N反向查找 高级查找● 普通模式下输入\*寻找游标所在处的单词 ● 普通模式下输入\#同上，但 \# 是向前（上）找，\*则是向后（下）找 ● 普通模式下输入g\*同\* ，但部分符合该单词即可 ● 普通模式下输入g\#同\# ，但部分符合该单词即可 以上查找n,N 的继续查找命令依然可以用 多文件编辑使用vim编辑多个文件编辑多个文件有两种形式，一种是在进入vim前使用的参数就是多个文件。另一种就是进入vim后再编辑其他的文件。同时创建两个新文件并编辑 $ vim 1.txt 2.txt 默认进入1.txt文件的编辑界面12● 命令行模式下输入:n编辑2.txt文件，可以加!即:n!强制切换，之前一个文件的输入没有保存，仅仅切换到另一个文件● 命令行模式下输入:N编辑1.txt文件，可以加!即:N!强制切换，之前文件内的输入没有保存，仅仅是切换到另一个文件 进入vim后打开新文件12345678● 命令行模式下输入:e 3.txt 打开新文件3.txt● 命令行模式下输入:e# 回到前一个文件● 命令行模式下输入:ls可以列出以前编辑过的文档● 命令行模式下输入:b 2.txt（或者编号）可以直接进入文件2.txt编辑● 命令行模式下输入:bd 2.txt（或者编号）可以删除以前编辑过的列表中的文件项目● 命令行模式下输入:e! 4.txt，新打开文件4.txt，放弃正在编辑的文件● 命令行模式下输入:f 显示正在编辑的文件名● 命令行模式下输入:f new.txt，改变正在编辑的文件名字为new.txt 恢复文件如果因为断电等原因造成文档没有保存，可以采用恢复方式，vim -r进入文档后，输入:ewcover 1.txt来恢复 $ vim -r 1.txt 可视模式可视模式命令简介12345● 在普通模式下输入v（小写），进入字符选择模式，就可以移动光标，光标走过的地方就会选取。再次按下v会后就会取消选取。 ● 在普通模式下输入Shift+v（小写），进入行选择模式，按下V之后就会把整行选取，您可以上下移动光标选更多的行，同样，再按一次Shift+v就可以取消选取。● 在普通模式下输入 Ctrl+v（小写），这是区域选择模式，可以进行矩形区域选择，再按一次Ctrl+v取消选取。● 在可视模式下输入d删除选取区域内容● 在可视模式下输入y复制选取区域内容 视窗操作视窗操作简介vim可以在一个界面里打开多个窗口进行编辑，这些编辑窗口称为vim的视窗。 打开方法有很多种，例如可以使用在命令行模式下输入:new 打开一个新的vim视窗，并进入视窗编辑一个新文件（普通模式下输入Ctrl+w也可以,但是Ctrl+w在chrome下会与chrome关闭标签页的快捷键冲突，所以使用该快捷键你可以在IE或其它浏览器进行练习），除了:new命令，下述列举的多种方法也可以在命令模式或普通模式下打开新的视窗：12345678910111213141516● 命令行模式下输入:sp 1.txt 打开新的水平分屏视窗来编辑1.txt● 命令行模式下输入:vsp 2.txt 打开新的垂直分屏视窗来编辑2.txt● 普通模式下Ctrl-w s 将当前窗口分割成两个水平的窗口● 普通模式下Ctrl-w v 将当前窗口分割成两个垂直的窗口● 普通模式下Ctrl-w q 即 :q 结束分割出来的视窗。如果在新视窗中有输入需要使用强制符！即:q!● 普通模式下Ctrl-w o 打开一个视窗并且隐藏之前的所有视窗● 普通模式下Ctrl-w j 移至下面视窗● 普通模式下Ctrl-w k 移至上面视窗● 普通模式下Ctrl-w h 移至左边视窗● 普通模式下Ctrl-w l 移至右边视窗● 普通模式下Ctrl-w J 将当前视窗移至下面● 普通模式下Ctrl-w K 将当前视窗移至上面● 普通模式下Ctrl-w H 将当前视窗移至左边● 普通模式下Ctrl-w L 将当前视窗移至右边● 普通模式下Ctrl-w - 减小视窗的高度● 普通模式下Ctrl-w + 增加视窗的高度 文档加密创建加密文档$ vim -x file1 输入您的密码 确认密码 这样在下一次打开时，vim就会要求你输入密码 在vim执行外部命令在命令行模式中输入!可以执行外部的shell命令123● :!ls 用于显示当前目录的内容● :!rm FILENAME用于删除名为 FILENAME 的文件● :w FILENAME可将当前 VIM 中正在编辑的文件另存为 FILENAME 文件 帮助系统vim中的查看帮助123● 普通模式下按F1打开vim自己预设的帮助文档● 命令行模式下输入:h shiftwidth 打开名为shiftwidth的帮助文件● 命令行模式下输入:ver 显示版本及参数 功能设定vim的功能设定可以在编辑文件的时候进行功能设定，如命令行模式下输入:set nu（显示行数），设定值退出vim后不会保存。要永久保存配置需要修改vim配置文件。 vim的配置文件~/.vimrc(实验楼环境中配置文件在/etc/vim/vimrc)，可以打开文件进行修改，不过务必小心不要影响vim正常使用 获取目前的设定1234● 命令行模式下输入:set或者:se显示所有修改过的配置● 命令行模式下输入:set all 显示所有的设定值● 命令行模式下输入:set option? 显示option的设定值● 命令行模式下输入:set nooption 取消当期设定值 set功能的说明12345● 命令行模式下输入:set autoindent(ai) 设置自动缩进● 命令行模式下输入:set autowrite(aw) 设置自动存档，默认未打开● 命令行模式下输入:set background=dark或light，设置背景风格● 命令行模式下输入:set backup(bk) 设置自动备份，默认未打开● 命令行模式下输入: set cindent(cin) 设置C语言风格缩进]]></content>
      <tags>
        <tag>ubuntu基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器安装问题补充（安装时Select and install software失败）]]></title>
    <url>%2F2017%2F08%2F25%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%A1%A5%E5%85%85%2F</url>
    <content type="text"><![CDATA[服务器安装问题补充之前写好的服务器安装教程已经写好了，针对与大部分服务器的安装应该都可以正常安装了，但是近期安装实验室服务器的时候遇到了问题。安装时Select and install software失败，这个问题在以前没有遇到过，不过也有可能时启动盘做的有问题吧，不过是刚从ubuntu官网上下载的系统做的启动盘，有点迷，不过先记录一下好了。 #解决方案 先跳过该步骤根据系统的提示遇到这个步骤的时候我们可以选择重新再来一次，也可以直接跳过该步骤，这个地方我尝试过，就算你重新再来几次也是这样的。当然如果你选择重新安装系统，如果没有换系统盘的话还是这样的，换了以后我也不确定的。 所以再此我选择跳过此步骤，直接开始下面的安装，最后安装完成，重启完成 跳过后的问题及解决方案问题描述跳过上面的步骤以后我们发现我们可以正常的进入系统。但是呢，在这个时候我们开始安装一些必要的软件的时候，我们会发现根本找不到安装包的，并且在输入的时候也不能补全命令。 问题解决无法找到安装包这个时候我们可以发现其实是因为我们apt的源有问题，当然开始的时候它也会让你找CD的路径来进行安装，虽然应该可以通过外接CD或者硬盘然后通过路径来安装，不过这样很是麻烦，所以我们必须要修复它。 这个时候我们可以去更新apt的源，这里建议使用清华的源，比较方便比较快。清华源的网站：https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ 具体操作（因为没有安装vim呢，所以这里我们只能使用vi或者nano来进行文件系统的改写） 1sudo vi /etc/apt/sources.list 然后可以把里面的东西都删除掉或者使用“#”都注释掉下面开始往里面方源了，vi的操作跟vim的操作是一样的 下面是我填写的源，可以照着填：12345678910deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricteddeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricteddeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial universedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates universedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricteddeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security universedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security multiverse 无法自动补全命令为了提高我们的效率我们一般会用Tab键进行补全的，这个时候我在进行安装的时候install并不能自动补全，所以我进行如下操作： 1sudo apt install bash-completion 然后重启就可以了，问题解决。 服务器的远程配置正常安装ubuntu系统的时候在出错的这一步我们其实是可以选择打开ssh远程登陆的，但是此时系统安装这一步出错了，我们应该怎么打开ssh远程登陆的，毕竟对于服务器我们不能每个人都坐在服务器前面插个显示器来用。 首先安装sshsudo apt-get install openssh-server 理论上来说安装了ssh以后服务器的ssh会自动打开的，如果不放心可以查看一下 ps -e |grep ssh 如果看到sshd那说明ssh-server已经启动了。如果没有则可以这样启动： 1sudo /etc/init.d/ssh start 或者1service ssh start ssh-server配置文件位于/etc/ssh/sshd_config，在这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号然后重启SSH服务：12sudo /etc/init.d/ssh stopsudo /etc/init.d/ssh start 禁用root登陆其实这个也可以不禁用的，但是为了安全，我们一般都是禁用root直接远程登陆的。禁用的方法：修改/etc/ssh/ssh_config文件将其中的PermitRootLogin改成no就可以了，不过如果配置文件中没有这个的话，也可以直接手动输入。然后重启ssh服务就可以了 /etc/rc.d/sshd restart 当然如果为了安全的话，其实我们可以直接禁用掉密码登陆，采取用密钥登陆的方式，这样更安全。因为其实你的密码很容易被别人截获的，这个可以参看之前的博客进行设置。另外补充一句：其实咱们使用的账户及密码等信息保存在 /etc/passwd 以及 /etc/shadow 中，密码采用crypt（）算法加密保存了而已。]]></content>
      <tags>
        <tag>手把手教你配置Ubuntu server服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言编写程序计时]]></title>
    <url>%2F2017%2F08%2F22%2FC%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%97%B6%2F</url>
    <content type="text"><![CDATA[C语言编写程序计时在我们编程的时候，有时候需要我们去监测程序运行的时间问题，尤其是在做加速或者做优化的时候，一个程序运行的时间也许就是我们判断程序好坏的标准，所以我们有时候要进行计时。（因为用到了，所以做个记录方便下次查看） 在windows上进行计时123456789101112131415161718#include "stdio.h"#include "time.h"clock_t start_time, finish_time;/*计时*/double cord_time;/*计时*/int main(int argc, char* argv[])&#123; start_time = clock();/*****************************计时开始***********************************/ /*******************/ /*这里编写程序*/ /*******************/ finish_time = clock();/***************************计时结束***********************************/ //显示总的用时 cord_time = (double)(finish_time - start_time) ; printf("time=%f ms\n", cord_time); return 0;&#125; 在linux上进行计时123456789101112131415161718192021222324252627282930313233#include "stdio.h"#include &lt;sys/time.h&gt;int time_substract(struct timeval *result, struct timeval *begin,struct timeval *end)&#123; if(begin-&gt;tv_sec &gt; end-&gt;tv_sec) return -1; if((begin-&gt;tv_sec == end-&gt;tv_sec) &amp;&amp; (begin-&gt;tv_usec &gt; end-&gt;tv_usec)) return -2; result-&gt;tv_sec = (end-&gt;tv_sec - begin-&gt;tv_sec); result-&gt;tv_usec = (end-&gt;tv_usec - begin-&gt;tv_usec); if(result-&gt;tv_usec &lt; 0) &#123; result-&gt;tv_sec--; result-&gt;tv_usec += 1000000; &#125; return 0;&#125;int main(int argc, char* argv[])&#123; struct timeval start,stop,diff; memset(&amp;start,0,sizeof(struct timeval)); memset(&amp;stop,0,sizeof(struct timeval)); memset(&amp;diff,0,sizeof(struct timeval)); gettimeofday(&amp;start,0); /*******************/ /*这里编写程序*/ /*******************/ gettimeofday(&amp;stop,0); time_substract(&amp;diff,&amp;start,&amp;stop); printf("Total time : %d s,%d us\n",(int)diff.tv_sec,(int)diff.tv_usec); return 0;&#125;]]></content>
      <tags>
        <tag>常用的C语言小程序代码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C 语言TXT文件的读写]]></title>
    <url>%2F2017%2F08%2F22%2FC-%E8%AF%AD%E8%A8%80TXT%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%86%99%2F</url>
    <content type="text"><![CDATA[C语言编写TXT文件的读写本问针对的是对txt文件中数据的读写操作（非二进制的，二进制的可能后面会补充）,因为用到做个记录。 C语言编写TXT文件的读12345678910111213141516171819void Read_file(double **Matrix, char *FileName, int height, int wide)&#123; FILE *fp = fopen(FileName, "r"); if (!fp) &#123; printf("can't open file\n"); &#125; else &#123; for (int i = 0; i &lt; height; i++) &#123; for (int j = 0; j &lt; wide; j++) &#123; fscanf(fp, "%lf", &amp;Matrix[i][j]); &#125; &#125; &#125; fclose(fp);&#125; C语言编写TXT文件的写1234567891011121314151617FILE *fp = fopen(output, "w+");if (!fp)&#123; printf("can't open file\n");&#125;else&#123; for (int i = 0; i &lt; FC_height; i++) &#123; for (int j = 0; j &lt; FC_wide; j++) &#123; fprintf(fp, "%lf\t", FC_matrix[i][j]); &#125; fprintf(fp, "\n"); &#125;&#125; fclose(fp);]]></content>
      <tags>
        <tag>常用的C语言小程序代码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件脚本编写问题]]></title>
    <url>%2F2017%2F08%2F17%2F%E6%96%87%E4%BB%B6%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E9%97%AE%E9%A2%98-by%E9%BB%84%E6%B5%B7%E4%BA%AE%2F</url>
    <content type="text"><![CDATA[文件脚本编写问题在编写脚本的时候我们可能会遇到一些各种各样的小问题，比如放置位置，以及使用权限等。 文件脚本编写好以后可以直接放置到 /usr/local/sbin 目录下面，这样就可以不用去申请环境变量了，使用起来也就比较方便了。 chmod a+x [文件名] 付给权限]]></content>
      <tags>
        <tag>Hadoop脚本编写</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[清理集群的脚本]]></title>
    <url>%2F2017%2F08%2F17%2F%E6%B8%85%E7%90%86%E9%9B%86%E7%BE%A4%E7%9A%84%E8%84%9A%E6%9C%AC-by%E9%BB%84%E6%B5%B7%E4%BA%AE%2F</url>
    <content type="text"><![CDATA[清理集群的脚本该脚本旨在重新配置hadoop的时候我们需要清理一下集群中的东西，比如记录等。 clear.sh源代码例子123456#!/bin/bashstop-all.shxrm.sh /tmp/hadoopxrm.sh /hadoop/logsecho "clean done!"(主要为了清除tmp下面的文件hadoop还有logs)]]></content>
      <tags>
        <tag>Hadoop脚本编写</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初始化集群]]></title>
    <url>%2F2017%2F08%2F17%2F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%9B%86%E7%BE%A4-by%E9%BB%84%E6%B5%B7%E4%BA%AE%2F</url>
    <content type="text"><![CDATA[初始化集群该脚本主要时对第一次使用集群的时候进行一个初始化。 init.sh源代码例子123#!/bin/bash hdfs namenode -formatstart-all.sh 或者12start-dfs.shstart-yarn.sh 创建目录1./bin/hdfs dfs -mkdir -p /user/hadoop 查看显示目录1hadoop fs –ls -R /]]></content>
      <tags>
        <tag>Hadoop脚本编写</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[所有节点 文件删除脚本编写]]></title>
    <url>%2F2017%2F08%2F17%2F%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9-%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-by%E9%BB%84%E6%B5%B7%E4%BA%AE%2F</url>
    <content type="text"><![CDATA[所有节点 文件删除脚本编写该脚本旨在删除所有节点上相同的东西，比如hadoop的重新配置等，还有删除hadoop的log等文件，都比较方便。 xrm.sh的源代码例子12345678910111213141516171819202122232425#!/bin/bashif [ $# -lt 1 ] ; thenecho no argsexit;fi#get first argumentarg1=$1;cuser=`whoami`fname=`basename $arg1`dir=`dirname $arg1`if [ $dir == "." ] ; thendir=`pwd`# echo $dirfiecho -----------------rming $arg1 from localhost-------------;rm -rf $arg1echofor (( i=200;i&lt;=500;i=i+100)) ;doecho ---------------rming $arg1 from s$i -------------;ssh s$i rm -rf $dir/$fnameechodone]]></content>
      <tags>
        <tag>Hadoop脚本编写</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[所有节点 文件拷贝脚本编写]]></title>
    <url>%2F2017%2F08%2F17%2F%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9-%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-by%E9%BB%84%E6%B5%B7%E4%BA%AE%2F</url>
    <content type="text"><![CDATA[所有节点 文件拷贝脚本编写该脚本旨在往每个节点拷贝数据，之前我们的拷贝是需要自己一个节点一个节点链接然后拷贝，但是如果我们每个节点都拷贝同样的数据时，这样做显然很麻烦，如果节点多的话还很浪费时间，这样我们就可以通过该脚本自己循环拷贝。 xcp.sh源代码例子12345678910111213141516171819202122232425#!/bin/bashif [ $# -lt 1 ] ; thenecho no argsexit;fi#get first argumentarg1=$1;cuser=`whoami`fname=`basename $arg1`dir=`dirname $arg1`if [ $dir == "." ] ; thendir=`pwd`# echo $dirfifor (( i=200;i&lt;=500;i=i+100)) ;doecho -----------coping $arg1 to $i------------------;if [ -d $arg1 ] ; thenscp -r $arg1 $cuser@s$i:$direlsescp $arg1 $cuser@s$i:$dirfiechodone]]></content>
      <tags>
        <tag>Hadoop脚本编写</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[所有节点执行同一指令的操作]]></title>
    <url>%2F2017%2F08%2F17%2F%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E6%89%A7%E8%A1%8C%E5%90%8C%E4%B8%80%E6%8C%87%E4%BB%A4%E7%9A%84%E6%93%8D%E4%BD%9C-by%E9%BB%84%E6%B5%B7%E4%BA%AE%2F</url>
    <content type="text"><![CDATA[所有节点执行同一指令的操作该脚本旨在对每个节点都执行同一个指令，这样就不用每次都shell到每个子节点上去执行了，较为方便。 xcall.sh的源代码例子123456789101112131415#!/bin/bashif [ $# -lt 1 ] ; thenecho no argsexit;fiecho -----------------xcall $arg1 from localhost-----------------$@echo#get first argumentfor (( i=0;i&lt;=3;i=i+1));do echo --------------------xcall $arg1 from Slave$i ------------------;ssh Slave$i $@echodone]]></content>
      <tags>
        <tag>Hadoop脚本编写</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[所有节点 文件查看脚本编写]]></title>
    <url>%2F2017%2F08%2F17%2F%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9-%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%2F</url>
    <content type="text"><![CDATA[所有节点 文件查看脚本编写该脚本用于一次查看所有集群节点相同位置下的文件，类似于手动在每个节点上输入ls指令进行查看。 xls.sh的源代码例子12345678910111213141516171819202122#!/bin/bashif [ $# -lt 1 ] ; thenecho no argsexit;fi#get first argumentarg1=$1;cuser=`whoami`fname=`basename $arg1`dir=`dirname $arg1`if [ $dir == "." ] ; thendir=`pwd`# echo $dirfifor (( i=200;i&lt;=500;i=i+100)) ;doecho ---------------ls $arg1 from s$i -------------;ssh s$i ls $dir/$fname | xargsechodone]]></content>
      <tags>
        <tag>Hadoop脚本编写</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扩展Slave的时候需要注意的一些问题]]></title>
    <url>%2F2017%2F08%2F17%2F%E6%89%A9%E5%B1%95Slave%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[扩展Slave的时候需要注意的一些问题 扩展的时候可以先直接按照Hadoop集群安装配置教程先进行。 这里需要更改 /usr/local/hadoop/etc/hadoop 路径下的 slave文件中的参数，需要把添加的节点加进去。 并且在Master里面的 /etc/hosts 中添加新加节点的IP和节点的命名。（如果想用节点的命名来连接任意一台节点计算机的话，我们需要把这个操作在每台节点计算机上进行） 如果存在改变节点名字的操作，在文件scp传输的时候可能会有错误，但是在警告中下面的语句有提示让移除之前命名和IP的对应关系，复制下来直接操作就可以了，然后在接着使用scp进行文件传输就没有什么问题了。]]></content>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hadoop安装_单机伪分布式配置]]></title>
    <url>%2F2017%2F08%2F16%2FHadoop%E5%AE%89%E8%A3%85_%E5%8D%95%E6%9C%BA%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Hadoop安装_单机伪分布式配置创建hadoop账户添加用户： sudo useradd -m hadoop -s /bin/bash 给用户设置密码： sudo passwd hadoop 给用户管理员权限： sudo adduser hadoop sudo 更新apt sudo apt-get update 安装vim: sudo apt-get install vim 安装SSH、配置SSH无密码登陆sudo apt-get install openssh-server ssh localhost exit # 退出刚才的 ssh localhost cd ~/.ssh/ # 若没有该目录，请先执行一次ssh localhost ssh-keygen -t rsa # 会有提示，都按回车就可以 cat ./id_rsa.pub &gt;&gt; ./authorized_keys # 加入授权 此时再 ssh localhost 时就可以无密码访问了。 安装Java环境sudo apt-get install openjdk-8-jre openjdk-8-jdk dpkg -L openjdk-8-jdk | grep &apos;/bin/javac&apos; vim ~/.bashrc export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 source ~/.bashrc # 使变量设置生效 检查是否正确： echo $JAVA_HOME # 检验变量值 java -version $JAVA_HOME/bin/java -version # 与直接执行 java -version 一样 如果设置正确的话，$JAVA_HOME/bin/java -version 会输出 java 的版本信息，且和 java -version 的输出结果一样 安装 Hadoop 2Hadoop 2 可以通过 http://mirror.bit.edu.cn/apache/hadoop/common/ 或者 http://mirrors.cnnic.cn/apache/hadoop/common/ 下载，一般选择下载最新的稳定版本，即下载 “stable” 下的 hadoop-2.x.y.tar.gz 这个格式的文件，这是编译好的，另一个包含 src 的则是 Hadoop 源代码，需要进行编译才可使用。 我们选择将 Hadoop 安装至 /usr/local/ 中： sudo tar -zxf ~/下载/hadoop-2.7.3.tar.gz -C /usr/local # 解压到/usr/local中 cd /usr/local/ sudo mv ./hadoop-2.7.3/ ./hadoop # 将文件夹名改为hadoop sudo chown -R hadoop ./hadoop # 修改文件权限 Hadoop 解压后即可使用。输入如下命令来检查 Hadoop 是否可用，成功则会显示 Hadoop 版本信息： cd /usr/local/hadoop ./bin/hadoop version Hadoop单机配置(非分布式)【这一步个人认为可以用来检测hadoop是否安装成功，可以不用管的】 cd /usr/local/hadoop mkdir ./input cp ./etc/hadoop/*.xml ./input # 将配置文件作为输入文件 ./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep ./input ./output &apos;dfs[a-z.]+&apos; （和上面一行连着的） cat ./output/* # 查看运行结果 rm -r ./output Hadoop伪分布式配置Hadoop 可以在单节点上以伪分布式的方式运行，Hadoop 进程以分离的 Java 进程来运行，节点既作为 NameNode 也作为 DataNode，同时，读取的是 HDFS 中的文件。 Hadoop 的配置文件位于 /usr/local/hadoop/etc/hadoop/ 中，伪分布式需要修改2个配置文件 core-site.xml 和 hdfs-site.xml 。Hadoop的配置文件是 xml 格式，每个配置以声明 property 的 name 和 value 的方式来实现。 修改配置文件 core-site.xml (通过 vim 编辑会比较方便: vim ./etc/hadoop/core-site.xml)，将当中的1234567891011121314&lt;configuration&gt;&lt;/configuration&gt;修改为下面配置：&lt;configuration&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt; &lt;description&gt;Abase for other temporary directories.&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 同样的，修改配置文件 hdfs-site.xml：1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 配置完成后，执行 NameNode 的格式化:成功的话，会看到 “successfully formatted” 和 “Exitting with status 0” 的提示，若为 “Exitting with status 1” 则是出错。 接着开启 NameNode 和 DataNode 守护进程。 ./sbin/start-dfs.sh 输入yes（可能第一次需要）启动完成后，可以通过命令 jps 来判断是否成功启动，若成功启动则会列出如下进程: “NameNode”、”DataNode” 和 “SecondaryNameNode”（如果 SecondaryNameNode 没有启动，请运行 sbin/stop-dfs.sh 关闭进程，然后再次尝试启动尝试）。如果没有 NameNode 或 DataNode ，那就是配置不成功，请仔细检查之前步骤，或通过查看启动日志排查原因。成功启动后，可以访问 Web 界面 http://localhost:50070/ 查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件。 运行Hadoop伪分布式实例（配置时其实也可以不用管，它只是跑了一个例子） 上面的单机模式，grep 例子读取的是本地数据，伪分布式读取的则是 HDFS 上的数据。要使用 HDFS，首先需要在 HDFS 中创建用户目录： ./bin/hdfs dfs -mkdir -p /user/hadoop 接着将 ./etc/hadoop 中的 xml 文件作为输入文件复制到分布式文件系统中，即将 /usr/local/hadoop/etc/hadoop 复制到分布式文件系统中的 /user/hadoop/input 中。我们使用的是 hadoop 用户，并且已创建相应的用户目录 /user/hadoop ，因此在命令中就可以使用相对路径如 input，其对应的绝对路径就是 /user/hadoop/input: ./bin/hdfs dfs -mkdir input ./bin/hdfs dfs -put ./etc/hadoop/*.xml input 复制完成后，可以通过如下命令查看文件列表： ./bin/hdfs dfs -ls input 伪分布式运行 MapReduce 作业的方式跟单机模式相同，区别在于伪分布式读取的是HDFS中的文件（可以将单机步骤中创建的本地 input 文件夹，输出结果 output 文件夹都删掉来验证这一点）。 ./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep input output &apos;dfs[a-z.]+&apos; 查看运行结果的命令（查看的是位于 HDFS 中的输出结果）： ./bin/hdfs dfs -cat output/* 我们也可以将运行结果取回到本地： rm -r ./output # 先删除本地的 output 文件夹（如果存在） ./bin/hdfs dfs -get output ./output # 将 HDFS 上的 output 文件夹拷贝到本机 cat ./output/* Hadoop 运行程序时，输出目录不能存在，否则会提示错误 “org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory hdfs://localhost:9000/user/hadoop/output already exists” ，因此若要再次执行，需要执行如下命令删除 output 文件夹: ./bin/hdfs dfs -rm -r output # 删除 output 文件夹 若要关闭 Hadoop，则运行 ./sbin/stop-dfs.sh 启动YARN（伪分布式不启动 YARN 也可以，一般不会影响程序执行） YARN 是从 MapReduce 中分离出来的，负责资源管理与任务调度。YARN 运行于 MapReduce 之上，提供了高可用性、高扩展性 上述通过 ./sbin/start-dfs.sh 启动 Hadoop，仅仅是启动了 MapReduce 环境，我们可以启动 YARN ，让 YARN 来负责资源管理与任务调度。 首先修改配置文件 mapred-site.xml，这边需要先进行重命名： mv ./etc/hadoop/mapred-site.xml.template ./etc/hadoop/mapred-site.xml 然后再进行编辑，同样使用 vim 编辑 vim ./etc/hadoop/mapred-site.xml ：123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 接着修改配置文件 yarn-site.xml：123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 然后就可以启动 YARN 了（需要先执行过 ./sbin/start-dfs.sh）： ./sbin/start-yarn.sh # 启动YARN ./sbin/mr-jobhistory-daemon.sh start historyserver # 开启历史服务器，才能在Web中查看任务运行情况 开启后通过 jps 查看，可以看到多了 NodeManager 和 ResourceManager 两个后台进程启动 YARN 之后，运行实例的方法还是一样的，仅仅是资源管理方式、任务调度不同。观察日志信息可以发现，不启用 YARN 时，是 “mapred.LocalJobRunner” 在跑任务，启用 YARN 之后，是 “mapred.YARNRunner” 在跑任务。启动 YARN 有个好处是可以通过 Web 界面查看任务的运行情况：http://master:8088/cluster， 同样的，关闭 YARN 的脚本如下： ./sbin/stop-yarn.sh ./sbin/mr-jobhistory-daemon.sh stop historyserver 参考资料Hadoop集群安装配置教程_Hadoop2.6.0_Ubuntu/CentOS：http://www.powerxing.com/install-hadoop-cluster/ Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04http://www.powerxing.com/install-hadoop/]]></content>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hadoop集群安装配置教程]]></title>
    <url>%2F2017%2F08%2F16%2FHadoop%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[hadoop集群安装准备工作Hadoop 集群的安装配置大致为如下流程: 1、选定一台机器作为 Master 2、在 Master 节点上配置 hadoop 用户、安装 SSH server、安装 Java 环境 3、在 Master 节点上安装 Hadoop，并完成配置 4、在其他 Slave 节点上配置 hadoop 用户、安装 SSH server、安装 Java 环境 5、将 Master 节点上的 /usr/local/hadoop 目录复制到其他 Slave 节点上 6、在 Master 节点上开启 Hadoop 创建hadoop账户添加用户： sudo useradd -m hadoop -s /bin/bash 给用户设置密码： sudo passwd hadoop 给用户管理员权限： sudo adduser hadoop sudo 更新aptsudo apt-get update 安装vim: sudo apt-get install vim ##安装Java环境 sudo apt-get install openjdk-8-jre openjdk-8-jdk dpkg -L openjdk-8-jdk | grep &apos;/bin/javac&apos; vim ~/.bashrc export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 source ~/.bashrc # 使变量设置生效 检查是否正确： echo $JAVA_HOME # 检验变量值 java -version $JAVA_HOME/bin/java -version # 与直接执行 java -version 一样 如果设置正确的话，$JAVA_HOME/bin/java -version 会输出 java 的版本信息，且和 java -version 的输出结果一样 安装 Hadoop 2Hadoop 2 可以通过 http://mirror.bit.edu.cn/apache/hadoop/common/ 或者 http://mirrors.cnnic.cn/apache/hadoop/common/ 下载，一般选择下载最新的稳定版本，即下载 “stable” 下的 hadoop-2.x.y.tar.gz 这个格式的文件，这是编译好的，另一个包含 src 的则是 Hadoop 源代码，需要进行编译才可使用。 我们选择将 Hadoop 安装至 /usr/local/ 中：sudo tar -zxf ~/下载/hadoop-2.7.3.tar.gz -C /usr/local # 解压到/usr/local中 cd /usr/local/ sudo mv ./hadoop-2.7.3/ ./hadoop # 将文件夹名改为hadoop sudo chown -R hadoop ./hadoop # 修改文件权限 Hadoop 解压后即可使用。输入如下命令来检查 Hadoop 是否可用，成功则会显示 Hadoop 版本信息： cd /usr/local/hadoop ./bin/hadoop version 网络配置假设集群所用的节点都位于同一个局域网。 首先在 Master 节点上完成准备工作，并关闭 Hadoop (/usr/local/hadoop/sbin/stop-dfs.sh)，再进行后续集群配置。 为了便于区分，可以修改各个节点的主机名（在终端标题、命令行中可以看到主机名，以便区分）。在 Ubuntu中，我们在 Master 节点上执行如下命令修改主机名（即改为 Master，注意是区分大小写的）： 设置主机名： sudo vim /etc/hostname 设置IP sudo vim /etc/hosts 设置如下： 192.168.1.121 Master 192.168.1.122 Slave1 我们在 /etc/hosts 中将该映射关系填写上去即可，如下图所示（一般该文件中只有一个 127.0.0.1，其对应名为 localhost，如果有多余的应删除，特别是不能有 “127.0.0.1 Master” 这样的记录） 配置好后需要在各个节点上执行如下命令，测试是否相互 ping 得通，如果 ping 不通，后面就无法顺利配置成功：ping Master -c 3 # 只ping 3次，否则要按 Ctrl+c 中断ping Slave1 -c 3 继续下一步配置前，请先完成所有节点的网络配置，修改过主机名的话需重启才能生效。 SSH无密码登陆节点sudo apt-get install openssh-server Master上面操作： 首先生成 Master 节点的公匙，在 Master 节点的终端中执行（因为改过主机名，所以还需要删掉原有的再重新生成一次）： cd ~/.ssh # 如果没有该目录，先执行一次ssh localhost rm ./id_rsa* # 删除之前生成的公匙（如果有） ssh-keygen -t rsa # 一直按回车就可以 让 Master 节点需能无密码 SSH 本机，在 Master 节点上执行： cat ./id_rsa.pub &gt;&gt; ./authorized_keys 完成后可执行 ssh Master 验证一下（可能需要输入 yes，成功后执行 exit 返回原来的终端）。接着在 Master 节点将上公匙传输到 Slave1 节点：（当然多个节点的话，每个节点都要传输） scp ~/.ssh/id_rsa.pub hadoop@Slave1:/home/hadoop/ Slave1上面操作： 接着在 Slave1 节点上，将 ssh 公匙加入授权： mkdir ~/.ssh # 如果不存在该文件夹需先创建，若已存在则忽略 cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys rm ~/id_rsa.pub # 用完就可以删掉了 如果有其他 Slave 节点，也要执行将 Master 公匙传输到 Slave 节点、在 Slave 节点上加入授权这两步。（如果配置好了以后可以用 ssh Slave1 指令检验，发现可以不用密码就可以连接上了） 配置PATH变量在单机伪分布式配置教程的最后，说到可以将 Hadoop 安装目录加入 PATH 变量中，这样就可以在任意目录中直接使用 hadoo、hdfs 等命令了，如果还没有配置的，需要在 Master 节点上进行配置。首先执行 vim ~/.bashrc，加入一行： export PATH=$PATH:/usr/local/hadoop/bin:/usr/local/hadoop/sbin 保存后执行 source ~/.bashrc 使配置生效 配置集群/分布式环境集群/分布式模式需要修改 /usr/local/hadoop/etc/hadoop 中的5个配置文件，更多设置项可点击查看官方说明，这里仅设置了正常启动所必须的设置项： slaves、core-site.xml、hdfs-site.xml、mapred-site.xml、yarn-site.xml 。 1, 文件 slaves，将作为 DataNode 的主机名写入该文件，每行一个，默认为 localhost，所以在伪分布式配置时，节点即作为 NameNode 也作为 DataNode。分布式配置可以保留 localhost，也可以删掉，让 Master 节点仅作为 NameNode 使用。 本教程让 Master 节点仅作为 NameNode 使用，因此将文件中原来的 localhost 删除，只添加一行内容：Slave1。（相应的如果有多个节点要都添加上的） 2, 文件 core-site.xml 改为下面的配置：1234567891011&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://Master:9000&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt; &lt;description&gt;Abase for other temporary directories.&lt;/description&gt; &lt;/property&gt;&lt;/configuration&gt; 3, 文件 hdfs-site.xml，dfs.replication 一般设为 3，但我们只有一个 Slave 节点，所以 dfs.replication 的值还是设为 1：（如果是多个节点还是改为3）【这里的参数我的理解是数据备份多少次】123456789101112131415161718&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt; &lt;value&gt;Slave0:50090&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;3&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 4, 文件 mapred-site.xml （可能需要先重命名，默认文件名为 mapred-site.xml.template），然后配置修改如下：1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt; &lt;value&gt;Master:10020&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt; &lt;value&gt;Master:19888&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 5, 文件 yarn-site.xml：12345678910&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt; &lt;value&gt;Master&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 配置好后，将 Master 上的 /usr/local/Hadoop 文件夹复制到各个节点上。因为之前有跑过伪分布式模式，建议在切换到集群模式前先删除之前的临时文件。 在 Master 节点上执行： cd /usr/local sudo rm -r ./hadoop/tmp # 删除 Hadoop 临时文件 sudo rm -r ./hadoop/logs/* # 删除日志文件 tar -zcf ~/hadoop.master.tar.gz ./hadoop # 先压缩再复制 cd ~ scp ./hadoop.master.tar.gz Slave1:/home/hadoop 在 Slave1 节点上执行：（如果有多个节点每个节点上都要执行一遍） sudo rm -r /usr/local/hadoop # 删掉旧的（如果存在） sudo tar -zxf ~/hadoop.master.tar.gz -C /usr/local sudo chown -R hadoop /usr/local/hadoop （如果启动不成功的话可以删除 /usr/loval 目录下的 logs和 tmp 再重新操作一次）同样，如果有其他 Slave 节点，也要执行将 hadoop.master.tar.gz 传输到 Slave 节点、在 Slave 节点解压文件的操作。 首次启动需要先在 Master 节点执行 NameNode 的格式化： hdfs namenode -format # 首次运行需要执行初始化，之后不需要 接着可以启动 hadoop 了，启动需要在 Master 节点上进行： start-dfs.sh start-yarn.sh mr-jobhistory-daemon.sh start historyserver 也可以在更目录下面执行 start-all.sh mr-jobhistory-daemon.sh start historyserver 通过命令 jps 可以查看各个节点所启动的进程。正确的话，在 Master 节点上可以看到 NameNode、ResourceManager、SecondrryNameNode、JobHistoryServer 进程 在 Slave 节点可以看到 DataNode 和 NodeManager 进程. 缺少任一进程都表示出错。另外还需要在 Master 节点上通过命令 hdfs dfsadmin -report 查看 DataNode 是否正常启动，如果 Live datanodes 不为 0 ，则说明集群启动成功。 也可以通过 Web 页面看到查看 DataNode 和 NameNode 的状态：http://master:50070/。如果不成功，可以通过启动日志排查原因。 同样可以通过 Web 界面查看任务进度 http://master:8088/cluster，在 Web 界面点击 “Tracking UI” 这一列的 History 连接，可以看到任务的运行信息 参考资料Hadoop集群安装配置教程_Hadoop2.6.0_Ubuntu/CentOS：http://www.powerxing.com/install-hadoop-cluster/ Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04http://www.powerxing.com/install-hadoop/]]></content>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建立自己的github博客]]></title>
    <url>%2F2017%2F08%2F15%2F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84github%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[可以根据博客中的hello-world文件中讲述的安装下面是一些详细的步骤1、安装node,可以去node的官网直接下载 https://nodejs.org/en/ （这里我下载的是node-v6.11.1-x64）2、安装hexo，可以打开cmd终端输入 npm install -g hexo-cli 3、安装完hexo后开始在电脑上建立一下自己写博客的文件夹，依旧是在cmd终端中运行 cd C:\Users\Darren\Documents #实际上是进入了电脑的文档文件夹 mkdir blog cd blog hexo init blog cd blog hexo s 然后就可以用 http://localhost:4000/ 来查看博客是否安装成功 npm install hexo-deployer-git --save 4、修改_config.yml这个配置文件 # Site title: Darren subtitle: 海亮的笔记本 description: author: Darren language: zh-Hans timezone: # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: repo是自己在自己github中建立的地址 5、开始部署 hexo d 之后可以去看一下你的博客就好了 https://huanghailiang.github.io/ 到此博客基本搭建完成了，剩下的东西就可以按照自己的兴趣去自己配置了。 如果标签没有的话需要自己新建一个hexo new page tags 里面修改为： --- title: tags date: 2017-08-15 11:06:32 type: tags ---]]></content>
      <tags>
        <tag>搭建自己的github博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深度学习环境搭建------by邵碧尧]]></title>
    <url>%2F2017%2F07%2F23%2F%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[深度学习环境搭建开始接触深度学习一年多时间了，总是有种技术发展飞快，没等你掌握现有技术更牛X的技术又出来了。身处AI浪潮中，到现在越发有种感觉：深度学习可能很多问题都能解决，但我们自己并没有那么多精力去研究那么多方面，自然语言处理，自动驾驶，人脸识别等等，选定一个方向深入研究才是正解。至少目前是这么理解的，不对希望朋友指正！ 如今深度学习的框架很多，Caffe，TensorFlow，Torch等都各有各的优势，开始深度学习不可避免要配置深度学习的工作环境，如果不知道方法也许在开头就会花费很多时间，写这篇博客的目的就是帮助大家更快上手。下面介绍Caffe在Ubuntu 16.04上的搭建过程（Ubuntu 14.04同样可以） CaffeCaffe的环境搭建在几个框架中是最麻烦的，因为Caffe用到的依赖库很多，如果配置GPU版有时候显卡驱动和CUDA也能把你折腾好久。CPU版和GPU版主要差别就是在NVIDIA显卡驱动和CUDA的安装上，其他框架要用到NVIDIA显卡其实差别也就是这样，因此这也算服务器基础。两个版本有区别的地方会注明。 Nvidia driver123456789lspci | grep -i nvidiasudo add-apt-repository ppa:graphics-drivers/ppasudo apt-get updatesudo apt-get install nvidia-352 % 版本自己查询sudo shutdown -r now 重启后用下面命令查看驱动版本 1cat /proc/driver/nvidia/version CUDA到CUDA官网下载CUDA安装文件，选择对应版本 这里有下载deb [local]文件，后面会说runfile [local]的用法，先卖个关子。下载好后cd到存放安装的文件夹，使用一下命令，文件名千万别手输，善用tab键 12345sudo dpkg -i cuda-repo-ubuntu1604*amd64.debsudo apt-get updatesudo apt-get install cuda 安装结束，添加环境变量（如果安装服务器，环境变量在每个用户下都需要添加一次，应该是有更聪明的方法，目前还没有找到） 12345echo &apos;export PATH=/usr/local/cuda/bin:$PATH&apos; &gt;&gt; ~/.bashrcecho &apos;export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH&apos; &gt;&gt; ~/.bashrcsource ~/.bashrc 查看安装CUDA版本 1nvcc -V 显示下图信息说明安装好了 再重启下电脑 1sudo shutdown -r now cuDNN这是深度学习训练过程中的加速算法包，到cuDNN 下载对应的安装包，cd到安装包所在文件夹 123456789tar xvf cudnn*.tgzcd cudasudo cp */*.h /usr/local/cuda/include/sudo cp */libcudnn* /usr/local/cuda/lib64/sudo chmod a+r /usr/local/cuda/lib64/libcudnn* 上面说runfile (local)卖了个关子，可以显卡驱动和CUDA一起安装，属于比较方便的方法，和之前的方法有什么差别目前还不知道 1sudo sh cuda_8.0.61_375.26_linux.run 运行这句命令，接下来根据提示操作就好了结束后按照上面的方法添加环境变量 依赖库安装（CPU版从这里开始）12345678910111213141516171819sudo apt-get updatesudo apt-get upgradesudo apt-get install build-essential cmake g++ gfortran git pkg-config python-dev software-properties-common wgetsudo apt-get autoremovesudo rm -rf /var/lib/apt/lists/*sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compilersudo apt-get install --no-install-recommends libboost-all-devsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-devsudo apt-get install -y libatlas-base-devsudo apt-get install -y python-pip 下载Caffe123456789cd ~mkdir git //在home下新建一个git文件夹，用来存放那些从github上git下来的文件git clone https://github.com/BVLC/caffe.git //从github上git caffecd caffecp Makefile.config.example Makefile.config 修改Makefile.config 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//如果你不使用GPU的话，就将# CPU_ONLY := 1修改成：CPU_ONLY := 1//若使用cudnn，则将# USE_CUDNN := 1修改成：USE_CUDNN := 1//若使用的opencv版本是3的，则将# OPENCV_VERSION := 3修改为：OPENCV_VERSION := 3//若要使用python来编写layer，则需要将# WITH_PYTHON_LAYER := 1修改为WITH_PYTHON_LAYER := 1//重要的一项将# Whatever else you find you need goes here.下面的INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/includeLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib修改为：INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serialLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial//这是因为ubuntu16.04的文件包含位置发生了变化，尤其是需要用到的hdf5的位置，所以需要更改这一路径 创建Hdf5文件链接 1234567find . -type f -exec sed -i -e &apos;s^&quot;hdf5.h&quot;^&quot;hdf5/serial/hdf5.h&quot;^g&apos; -e &apos;s^&quot;hdf5_hl.h&quot;^&quot;hdf5/serial/hdf5_hl.h&quot;^g&apos; &apos;&#123;&#125;&apos; \;cd /usr/lib/x86_64-linux-gnusudo ln -s libhdf5_serial.so.10.1.0 libhdf5.sosudo ln -s libhdf5_serial_hl.so.10.0.2 libhdf5_hl.so 执行caffe下python文件夹下的指令 1234567cd pythonfor req in $(cat requirements.txt); do pip install $req; done\\目的是检查caffe所需要的python的库的版本，如果出现红字错误说明版本不满足要求，执行下面语句for req in $(cat requirements.txt); do sudo -H pip install $req --upgrade; done 编辑/usr/local/cuda/include/host_config.h，将其中的第115行 123#error -- unsupported GNU version! gcc versions later than 4.9 are not supported!% 改为//#error -- unsupported GNU version! gcc versions later than 4.9 are not supported! make 各种文件（cd到Caffe文件夹）123456789make all -j8 //j8代表计算机cpu有8个核，因此可以多线程一起make，这样make的速度会快很多。一般常用的还有j4make test -j8make runtest -j8make pycaffe //编译python接口make distribute 到这里搭建完毕]]></content>
      <tags>
        <tag>深度学习环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装远程图形界面x2go------by邵碧尧]]></title>
    <url>%2F2017%2F07%2F23%2F%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_5%2F</url>
    <content type="text"><![CDATA[手把手教你配置Ubuntu server服务器安装远程图形界面x2goUbuntu server 安装完成只有命令行界面，一般的工作在Windows下用 xshell 和 winscp ，一个输命令行，一个进行界面化文件管理，还是挺方便的， 但部分用户还是希望有个图形界面更加方便科研工作开展，这里推荐x2go这个轻量化桌面，安装也比较方便，下面就来介绍。首先在服务器上安装一些必要的软件 123456sudo apt-get install software-properties-commonsudo add-apt-repository ppa:x2go/stablesudo apt-get updatesudo apt-get install x2goserver x2goserver-xsessionsudo apt-get updatesudo apt-get install -y xfce4 xfce4-goodies xubuntu-desktop 很简单，几条命令结束就OK了。结束用 1hostname -I 查看ip，后面在Windows下要用到 然后在 Windows 或者 OS X 下安装一个客户端 x2go client ,安装结束打开会跳出如下窗口 在”Host” 中填写服务器ip“Login”中填写要登录的username“Session type”下拉菜单选择“XFCE”，点击OK结束。 在这里输入密码就可以远程连接服务器，同时拥有图形界面了。 配置服务器系列到这里就结束了，小白我自己也在后面多多积累相关的技巧，有了新的经验再来更新，希望大家支持！]]></content>
      <tags>
        <tag>手把手教你配置Ubuntu server服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[管理服务器用户------by邵碧尧]]></title>
    <url>%2F2017%2F07%2F23%2F%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_4%2F</url>
    <content type="text"><![CDATA[手把手教你配置Ubuntu server服务器管理服务器用户管理服务器用户，一项一项开始说，首先要管理，当然要现有用户咯。添加用户我是用adduser 命令，相当于一个简单的交互过程，命令如下： 1sudo adduser username 然后会让你确定用户名，用户密码这些信息，结束后在/home目录下就有一个对应用户名的文件夹了。管理员添加用户后，用户自己可以通过 1passwd 来更新自己的密码。 哪天可能那个用户惹到root管理员了，管理员要删掉那个用户，怎么操作，非常简单 1userdel username 秒删好吧！所以不要惹管理员 如果想修改用户名有改怎么办，有几种方案 第一种，简单粗暴，按照上面的方法删掉用户重新建 第二种，优雅一点，两条命令搞定 12usermod -l New_Login_Name, -md Home_Directory Old_Login_Name groupmod -n NewName OldName 管理员会给服务器装一些基本的软件，有的用户想装自己需要的软件，但是没有权限怎么办嘞？每次都找管理员也是烦的，因此可以给部分用户 sudo 权限，怎么操作呢？修改/etc/sudoers文件，在 root ALL=(ALL) ALL下方添加要给权限的用户名 12root ALL=(ALL) ALLusername ALL=(ALL) ALL 还有种方法就是直接创建管理者账号 1sudo adduser username sudo 以上就是一些最基本的用户管理指令，刚开始是够用了，到后面反正慢慢积累嘛]]></content>
      <tags>
        <tag>手把手教你配置Ubuntu server服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设置服务器网络------by邵碧尧]]></title>
    <url>%2F2017%2F07%2F23%2F%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_3%2F</url>
    <content type="text"><![CDATA[手把手教你配置Ubuntu server服务器设置服务器网络之前两篇讲了服务器系统安装和硬盘挂载，这篇总结下网络设置。具体开始讲之前先说说如何实现其他人可以访问服务器。一种方法是由一个网口出来接路由器，用户都连接到路由器的网络上，不管是通过有线还是WiFi，把用户都归到同一个网络下。另一种方法就比较bug了，像清华大学那样，整个学校有线网和无线的Tsinghua都是同一个网络，所以就不需要路由器了，之前不知道还倒腾了很久。又有人要问了，那如何让外网的人可以访问服务器呢？不好意思，我没有研究过，另一个原因也是担心网络安全的问题，毕竟没有学过相关的知识，所以搭个服务器内部用就完了。如果有大神在这方面比较有研究，我也非常欢迎交流。（邮箱：shaobiyao@gmail.com）说回来，先解决基本问题再说 sudo vim /etc/network/interfaces 修改如下部分： auto eth0（这个名称每台机器不一样，可以通过ifconfig -a查询）iface eth0 inet staticaddress 192.168.0.117 #选用同一个网络下不冲突的ipgateway 192.168.0.1 #gateway and netmask 可以通过查看同一网络下的Windows电脑的信息获得，都一样的netmask 255.255.255.0 sudo vim /etc/resolvconf/resolv.conf.d/base(网上有说修改/etc/resolv.conf的，这个文件修改完会被系统覆盖，等于白改)nameserver XXX.XXX.XXX.XXX #和同一网络中Windows的电脑一样 重启网卡： sudo /etc/init.d/network restart 用ping www.baidu.com测试是否成功]]></content>
      <tags>
        <tag>手把手教你配置Ubuntu server服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器多硬盘挂载------by邵碧尧]]></title>
    <url>%2F2017%2F07%2F23%2F%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_2%2F</url>
    <content type="text"><![CDATA[手把手教你配置Ubuntu server服务器服务器多硬盘挂载现在科研中需要处理的数据量经常性会非常大，因此服务器基本都会采用固态硬盘加机械硬盘的解决方案来实现服务器性能和成本的平衡，系统装在固态中，用户数据和数据集存放在机械硬盘中。接下来就讲下如何挂载硬盘 参考网页： http://zwkufo.blog.163.com/blog/static/258825120141283942244/http://www.jianshu.com/p/5c12289dbcd1sudo fdisk –lu (查看当前硬盘及分区情况) 可以看到类似界面 列表中我们可以看到所有硬盘，找到要挂载的硬盘名称，例如/dev/sdb sudo fdisk /dev/sdb(这里为想要挂载的硬盘名称)，利用该命令可以对硬盘进行分区，具体可以参考网页1中的讲解更加详细 sudo mkfs –t ext4 /dev/sdb(硬盘格式化，-t ext4 表示将分区格式化成ext4文件系统类型) sudo df –l(显示硬盘挂载情况)sudo mount –t ext4 /dev/sdb(想要挂载的硬盘) /devdata(目标挂载点)结束后可以用sudo df –l 查看是否成功 配置系统启动自动挂载，修改/etc/fstab文件，添加/devdata was on /dev/sdbUUID=37eaa526-5d96-4237-8468-603df5216ce9 /devdata(挂载点) ext4 defaults 0 2硬盘的UUID通过命令 sudo blkid 进行查看 这样就把/dev/sdb挂载到/devdata这个文件夹下了。有人要问了，我不要挂这里，要把硬盘挂到/home目录下怎么办？接下来就是解决这个问题 首先要做的是卸载原先的挂载点，怎么做，很简单， sudo umount /dev/sdb(这里好像是写挂载的文件夹名也可以，但我没有试过)，再用 sudo df -l 查看，原先挂载的硬盘就没有了。 接下来你得挂载已经分区好的硬盘，然后把 home 目录下的全部文件拷贝到硬盘挂载的目录下。然后删除 home 目录，最后把第一步挂载好的新硬盘重新挂载在 home 目录下。 挂载设置好的硬盘 同步 home 目录所有文件，删除之前的 home 目录下的所有文件 确定同步成功之后，删除旧 home 目录 重新挂载新硬盘并设置启动挂载 这里如果失败的话就修改/etc/fstab文件，把原先的挂载点改成/home再 sudo df -l，就可以看到成功挂载到/home下了，不过这样对新机器是没什么影响，如果原先机器上有非root用户，这样操作后就GG了，还是要做好数据备份]]></content>
      <tags>
        <tag>手把手教你配置Ubuntu server服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu server 16.04 安装教程------by邵碧尧]]></title>
    <url>%2F2017%2F07%2F23%2F%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_1%2F</url>
    <content type="text"><![CDATA[手把手教你配置Ubuntu server服务器近期实验室来了台新的服务器，第一次从头到尾把配置过程走了一遍，特来此总结一番，希望可以帮助到想入坑的童鞋。我将从以下几个方面来总结配置服务器的过程(系统版本为Ubuntu server 16.04) Ubuntu server 16.04 安装教程 服务器多硬盘挂载 设置服务器网络 管理服务器用户 安装远程图形界面x2go Ubuntu server 16.04 安装教程 Ubuntu server 16.04 启动U盘制作用装系统，没启用U盘怎么行呢！Ubuntu系统的启动U盘制作非常简单，首先从官网下载对应版本的系统镜像文件，下一步你需要一个空白的U盘，用于写入镜像文件，如果U盘中有资料千万做好备份。写入镜像文件的软件可以使用软碟通。 用软碟通打开镜像文件 菜单中“启动”-&gt;“写入硬盘映像” 写入U盘中，点击“写入”，然后就可以吃着火锅唱着歌等着进度条跑完就好了 ###安装Ubuntu serverMarkdown Extra 表格语法：首先用U盘启动，之前需要查下主板进入boot menu的快捷键（一般是Esc，Del，F2，F12等），选择自己U盘启动（可能会有一个UEFI选项，两者都行） 2017.7.12 update: 推荐大家安装时都选择英文版本，有时候选择中文版在最后安装的时候会报一些没办法解决的错误 用启动盘成功引导之后，出现下面的界面，恭喜你完成了第一步 选择语言你喜欢什么语言就什么语言咯 选择是否继续安装所选择的语言版本，选择”yes 选择”否”，默认键盘模式就好了 然后等进度条跑完，到这里键盘就已经好了，下面来配置服务器的一些基本信息。主机名自己起，但只能用字母和数字 激动人心的时候到了，设置服务器的第一个用户，没错，就是你啦 设置密码 要不要加密主目录，先“否”吧 设置时区，还是默认 接下来就是最关键的，选择系统安装硬盘，作者小白就不用“手动”了 这里选择空白区（理想情况就是系统装在固态中，然后再挂载一个大的机械硬盘） 这里我是选了一块空白的固态，大小是“max” 分区设定结束并将修改写入磁盘，结束后出现下面窗口 用空格选择：OpenSSH server 选择“yes” “continue”重启，完工 网络什么的安装过程不配置都没有问题，系统装好了再解决，放心大胆搞，最坏就是重装嘛，硬件一般不会搞坏。今天先写到这里，后面我接着按照前面的大纲更新，其实网上这些东西都有，我就是帮大家归纳总结下，希望对大家有帮助吧]]></content>
      <tags>
        <tag>手把手教你配置Ubuntu server服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu密钥登录教程]]></title>
    <url>%2F2017%2F07%2F22%2Fubuntu%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[ubuntu密钥登录教程上文已经讲诉了ubuntu系统设置密匙登陆，接下来讲解一下如何登陆。本文使用XShell进行远程连接使用WinSCP来进行ubuntu与ubuntu之间的文件的传输 XShell首先现在登录时输入密码那一栏已经变成了灰色，这个时候只能使用密匙登录了。拿到密钥的第一步可以先添加密钥 找到自己密钥的路径即可 密钥导入进来以后那个文件就可以不要了，当然如果还有其他地方需要的话还需要导入其他的地方，不过如果误删了不要方，旁边还有导出呢。导入成功以后可以进入属性 大家可以更改密码，初始密码都为空的，这个地方相当于你再给你的密钥又手动加了一层密码，当然也可以不加，因为我发现加了以后登录的时候还要你自己输入一遍。属性上面还有一公钥，这个里面就是我们放到服务器中的东西，这个东西不要给别人，当然我给你们的密匙你们更不能给别人，否者别人就可以轻松的登录你的账号了。剩下的登录方法更以前一样。 WinSCP同样此时winscp用密码也登录不上了确认 直接在之前建立的那个里面更改就好，点击编辑然后点高级 验证 然后添加密钥文件的路径 右下角选择所有文件 选择密匙然后有一个格式转换，选择确定 然后保存确定保存就完了，大功告成可以链接了。]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 系统设置密钥登陆]]></title>
    <url>%2F2017%2F07%2F22%2FUbuntu%20%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E5%AF%86%E9%92%A5%E7%99%BB%E9%99%86%2F</url>
    <content type="text"><![CDATA[Ubuntu 系统设置密钥登陆本文主要参考文档 http://www.downgle.com/zt/zqxouw0qwvstzrouysrloolz.html http://blog.csdn.net/kenhins/article/details/51585565自己简单整理留作备份以备后期查看个人感觉用密钥登陆比用密码登陆安全很多，所以一旦生成密码之后一定不要将自己的密钥给别人，否者别人将很轻松的登陆你的账户，当然我发现如果你使用XShell远程连接ubuntu服务器的时候你可以再给密钥加上一层密码的。 密钥的生成这一步如果你使用XShell的话其实很简单，在上面的工具中有一个“新建用户密钥生成向导”，进去你自己一定会的，这里就不多说了 #设置密钥登陆首先需要修改一些配置文件 vim /etc/ssh/sshd_config 进入sshd_config文件后需要更改几个地方 PubkeyAuthentication yes #启用公告密钥配对认证方式 AuthorizedKeysFile %h/.ssh/authorized_keys #设定PublicKey文件路径 RSAAuthentication yes #允许RSA密钥 PasswordAuthentication no #禁止密码验证登录,如果启用的话,RSA认证登录就没有意义了 #禁用root账户登录，非必要，但为了安全性，请配置 PermitRootLogin no 其实我在配置的时候发现其中有些找了很多遍都没有找到，然后我就直接手动照着输入一遍也是可以的。 然后保存配置，重新启动服务 service sshd restart #配置密钥由上面的配置文件我们可以看出来密钥放置的位置应该在用户根目录下的.ssh/authorized_keys中，如果系统本身就有authorize_keys，那么你就可以直接将你的公钥复制进来但是一般情况下刚装好的新机器没有这个目录，这就需要我们先生成一个(这里我们可以直接进入你要创建的账户去进行，可以使用指令 su 需要创建的用户名) ssh-keygen 输入该指令后一路回车即可回头用指令 ll 你可以发现在当前用户的更目录下就会生成一个 .ssh的文件夹,然后再进入这个文件夹操作 cd ~/.ssh vim authorized_keys 把自己生成的公钥复制进来就可以了然后保存，并且更改文件模式 chmod 600 authorized_keys 注意：有些时候复制的时候可能不全，尤其前面缺少几个字母，这个需要自己检查一下，否则登陆会不成功的]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双系统时ubuntu更改开机引导]]></title>
    <url>%2F2017%2F07%2F22%2F%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%97%B6ubuntu%E6%9B%B4%E6%94%B9%E5%BC%80%E6%9C%BA%E5%BC%95%E5%AF%BC%2F</url>
    <content type="text"><![CDATA[我们在windows上安装ubuntu双系统的时候，ubuntu的引导会默认先进入ubuntu系统，这对于那些想使用ubuntu但是并不常用ubuntu系统的人有一些不方便。在网上我有看到EaseBCD这个软件可以用来管理启动项的。但是因为个人之前和身边的朋友使用过，感觉其实并没有解决用户的问题，不安装EaseBCD的时候只用进入一次选择界面，而安装完EaseBCD的时候我们竟然需要进入两次引导界面，这就很不方便。（此处之争对ubuntu其他的双系统也许EaseBCD会更加方便些）另外之前一个朋友发现这个地方很不方便，于是就卸载了EaseBCD结果他的系统完全进不去了，最后在大神的指导下才修复进入了windows系统。说了这么多到底如何更改启动项呢？其实使用ubuntu自带的系统文件就可以了。 根据ubuntu自带的系统文件就可以修改启动顺序进入系统文件 sudo vim /etc/default/grub 进去之后找到GRUB_DEFAULT，它代表启动顺序。然后后面的数字需要根据自己电脑开机时显示的顺序进行选择当然里面还有很多的文件，还可以修改其他的参数，比如，选择界面等待的时间等（默认是10s,如果觉得开机时间太久了，可以自行更改的）]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu环境下降低gcc和g++的版本]]></title>
    <url>%2F2017%2F07%2F22%2Fubuntu-Reduce-the-version-gcc-g%2B%2B%2F</url>
    <content type="text"><![CDATA[有时候我们在跑别人的程序的时候发现自己编译器的版本过高以至于不能运行，这个时候我们就需要降低编译器的版本。 首先安装低版本的编译器这里由于本人用的ubuntu16.04所以编译器自带的是gcc-5.4和g++-5.4,但是需要低版本的，经过测试现在还可以安装4.7的版本 sudo apt-get install gcc-4.7 gcc-4.7-multilib g++-4.7 g++-4.7-multilib 配置级别sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.7 50 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 40 接着输入 sudo update-alternatives --config gcc 然后可以自己选择版本。 同理配置好了gcc还要配置g++ sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.7 50 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 40 同理g++的选择为： sudo update-alternatives --config g++ 如果想删除可选项的话可以键入以下指令： sudo update-alternatives --remove gcc /usr/bin/gcc-4.5 本文是自己跟同门根据网上资料整理而得，希望对大家有用。]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu16.04 Server install CUDA]]></title>
    <url>%2F2017%2F07%2F22%2Fubuntu16-04-Server-install-CUDA%2F</url>
    <content type="text"><![CDATA[ubuntu16.04 Server 安装CUDA在安装CUDA的时候经常会遇到CUDA安装失败的情况，一般遇到的不允许第三方软件的安装，或者是自带的驱动nouveau的存在。 允许第三方软件的安装这个需要自己重启电脑进入bios系统中去关闭UEFI的安全启动/安全引导 关闭自带的驱动nouveausudo vim /etc/modprobe.d/blacklist.conf 在该文件中添加以下几行： blacklist vga16fb blacklist rivafb blacklist rivatv blacklist nvidiafb options nouveau modeset=0 添加完以后保存该文件接着更新该文件，使配置有用 sudo update-initramfs -u 最后查看nouveau驱动禁止是否成功，如果没有内容则说明禁用成功。 如果nouveau驱动禁用后没有效果，可以进行强制移除该驱动（如果上面的方法禁用成功可以不使用该方法）将这个驱动备份出来然后移除 mv /lib/modules/3.0.0-12-generic/kernel/drivers/gpu/drm/nouveau/nouveau.ko /lib/modules/3.0.0-12-generic/kernel/drivers/gpu/drm/nouveau/nouveau.ko.org 重新加载 update-initramfs -u 重启发现字体已经变大了，卸载成功。 CUDA的安装因为本文说的ubuntu Server所以安装完一般使没有图形界面的，所以不需要去禁用图形界面，如果不是server版本的话一般还需要禁用图形界面的（可以用ctrl+alt+F1进入文本界面，F1~F6都可以F7是退出文本界面）。禁用图形界面的语句： sudo service lightdm stop 打开图形界面的语句： sudo service lightdm start nouveau禁用成功了，bios中的UEFI也已经关了，这个时候就可以安心的装CUDA了。首先需要安装依赖项： sudo apt-get install build-essential pkg-config linux-headers-$(uname -r) 或者下面的方法也可以（用了上面的语句下面的语句就不需要了）： sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler sudo apt-get install --no-install-recommends libboost-all-dev sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev 下载CUDA的安装包https://developer.nvidia.com/cuda-downloads可以去NVIDIA的官网去下载，可以根据需求下载。本文下载的runfile，其他形式的文本运行方法在下载界面有介绍的。下载好后用U盘或者SCP等上传到服务器上，接下来进入cuda安装包的地方执行，当然这里根据你的安装包的型号。 sudo sh cuda_8.0.61_375.26_linux.run 执行以后会有一堆文本让你读，很多，不过可以直接按q退出，然后按照要求先accept，然后再按照自己的需求安装，因为上面没有手动安装过nvidia的驱动，所以这里需要选择安装驱动的，否则cuda即使安装上了也没有用的。选择完了就开始安装了，安装完成后会有一个Summary显示安装的情况的。到此基本安装完了，可以使用下面的语句去检测nvidia驱动是否安装成功： cat /proc/driver/nvidia/version 如果可以弹出来驱动的版本信息等，说明安装成功，否者没有安装成功。 安装完后此时查找cuda是找不到的，因为还没有配置环境变量。接下来配置环境变量： echo &apos;export PATH=/usr/local/cuda/bin:$PATH&apos; &gt;&gt; ~/.bashrc echo &apos;export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH&apos; &gt;&gt; ~/.bashrc source ~/.bashrc 配置完环境变量后再检查一下cuda是否安装成功 nvcc -V 提示上面的必须是大写的V，小写的v是不能够被识别的。 ##如果要卸载或者重装卸载或者重新安装了。这个时候需要先卸载之前安装的。这个在用run文件安装的时候，最后那个summary已经告诉我们如何卸载了。 To uninstall the CUDA Toolkit. run the uninstall scrip in /usr/local/cuda-8.0/bin To uninstall the NVIDIA Driver. run nvidia-unistall 可以先按照上面的提示去卸载CUDA和NVIDIA驱动，当然还有其他的方法 sudo apt-get --purge remove &lt;package_name&gt; 本文参考网络上各种资源自己配置完自己实验室电脑后整理所得，做一个备忘所用，当然也希望对大家有用。]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thanks]]></title>
    <url>%2F2017%2F07%2F22%2Fthanks%2F</url>
    <content type="text"><![CDATA[Thanks for JingJing’s help to me!]]></content>
      <tags>
        <tag>start</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F21%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>start</tag>
      </tags>
  </entry>
</search>
